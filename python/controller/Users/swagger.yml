openapi: 3.0.0
info:
  title: "USER REST API"
  description: "An API about users"
  version: "1.0.0"

servers:
  - url: "/api"

components:
  # Schemas used in the API 
  schemas:
    User: # User schema that represents a user
      type: "object"
      required:
        - username
        - password
        - location
        - anime_watched
        - anime_watched_score
        - topics_subscribed
        - messages_sent
        - karma
        - achievements
      properties:
        username:
          type: "string"
        password:
          type: "string"
        location:
          type: "string"
        anime_watched:
          type: "array"
          items:
            type: "string"
        anime_watched_score:
          type: "array"
          items:
            type: "integer"
        topics_subscribed:
          type: "array"
          items:
            type: "string"
        karma:
          type: "integer"
        achievements:
          type: "array"
          items:
             $ref: "#/components/schemas/Achievement"
    Achievement: # Achievement schema that represents a Achievement
      type: "object"
      required: 
        - name
        - description
        - date
        - rarity
      properties:
        name:
          type: "string"
        description:
          type: "string"
        date:
          type: "string"
        rarity:
          type: "string"
          enum: [common, rare, epic, legendary, mythic]

  # Parameters for paths 
  parameters:
    user_name:
      name: "user_name"
      description: "Name of the user in question"
      in: path
      required: True
      schema:
        type: "string"
    achievement_name:
      name: "achievement_name"
      description: "Name of the achievement"
      in: path
      required: True
      schema:
        type: "string"


  # ====================================================
  # ======================= User =======================
  # ====================================================
paths:

  /user:
    post:
      operationId: "user.create"
      tags:
        - User
      summary: "Create a new user"
      requestBody:
          description: "User to create"
          required: True
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "Successfully created a user"

  /user/{user_name}/related_by_anime:
    parameters:
      - name: "user_name"
        in: path
        required: true
        description: "Name of the user"
        schema:
          type: "string"
    get:
      operationId: "user.get_related_by_anime"
      tags:
        - User
      summary: "Show related users to the specific user based on anime watched"
      responses:
        "200":
          description: "Successfully show related users"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: "User not found"

  /user/{user_name}/related_by_message:
    parameters:
      - name: "user_name"
        in: path
        required: true
        description: "Name of the user"
        schema:
          type: "string"
    get:
      operationId: "user.get_related_by_message"
      tags:
        - User
      summary: "Show related users to the specific user based on messages sent"
      responses:
        "200":
          description: "Successfully show related users"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: "User not found"

  /user/{user_name}/achievements:
    parameters:
      - name: "user_name"
        in: path
        required: true
        description: "Name of the user"
        schema:
          type: "string"
    get:
      operationId: "user.get_achievements"
      tags:
        - User
      summary: "Show user achievements"
      responses:
        "200":
          description: "Successfully show user achievements"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: "User not found"
  /user/{user_name}/{achievement_name}:
    parameters:
      - name: "user_name"
        in: path
        required: true
        description: "Name of the user"
        schema:
          type: "string"
      - name: "achievement_name"
        in: path
        required: true
        description: "Name of the achievement"
        schema:
          type: "string"
    post:
      operationId: "user.add_achievement"
      tags:
        - User
      summary: "Add an achievement to a user"
      requestBody:
          description: "User and achievement to add"
          required: True
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "Successfully added achievement"

  /user/{user_name}/karma:
    parameters:
      - name: "user_name"
        in: path
        required: true
        description: "Name of the user"
        schema:
          type: "string"
    get:
      operationId: "user.get_karma"
      tags:
        - User
      summary: "Show user karma"
      responses:
        "200":
          description: "Successfully show user karma"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: "User not found"

  /user/{user_name}/track_records:
    parameters:
      - name: "user_name"
        in: path
        required: true
        description: "Name of the user"
        schema:
          type: "string"
    get:
      operationId: "user.get_track_records"
      tags:
        - User
      summary: "Show user track records"
      responses:
        "200":
          description: "Successfully show user track records"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: "User not found"

  /user/{user_name}/messages:
    parameters:
      - name: "user_name"
        in: path
        required: true
        description: "Name of the user"
        schema:
          type: "string"
    get:
      operationId: "user.get_messages"
      tags:
        - User
      summary: "Show user messages"
      responses:
        "200":
          description: "Successfully show user messages"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: "User not found"

  /user/{user_name}/recomended_animeList:
    parameters:
      - name: "user_name"
        in: path
        required: true
        description: "Name of the user"
        schema:
          type: "string"
    get:
      operationId: "user.get_recomended_animeList"
      tags:
        - User
      summary: "Show recomended anime list for the user"
      responses:
        "200":
          description: "Successfully show recomended anime list"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Anime"
        "404":
          description: "User not found"