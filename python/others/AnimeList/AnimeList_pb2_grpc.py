# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))
import python.others.AnimeList.AnimeList_pb2 as others_dot_AnimeList__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in others/AnimeList_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AnimeListStub(object):
    """--------------------------> SERVICE FOR ANIMELIST
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllAnimes = channel.unary_unary(
                '/AnimeList/GetAllAnimes',
                request_serializer=others_dot_AnimeList__pb2.get_all_animes.SerializeToString,
                response_deserializer=others_dot_AnimeList__pb2.get_all_animes_Response.FromString,
                _registered_method=True)
        self.GetAnimeByName = channel.unary_unary(
                '/AnimeList/GetAnimeByName',
                request_serializer=others_dot_AnimeList__pb2.get_anime_by_name_Request.SerializeToString,
                response_deserializer=others_dot_AnimeList__pb2.get_anime_by_name_Response.FromString,
                _registered_method=True)
        self.GetMultipleAnimeByName = channel.unary_unary(
                '/AnimeList/GetMultipleAnimeByName',
                request_serializer=others_dot_AnimeList__pb2.get_multiple_anime_by_name_Request.SerializeToString,
                response_deserializer=others_dot_AnimeList__pb2.get_multiple_anime_by_name_Response.FromString,
                _registered_method=True)
        self.GetSimilarAnime = channel.unary_unary(
                '/AnimeList/GetSimilarAnime',
                request_serializer=others_dot_AnimeList__pb2.get_similar_anime_Request.SerializeToString,
                response_deserializer=others_dot_AnimeList__pb2.get_similar_anime_Response.FromString,
                _registered_method=True)
        self.GetRecomendedAnimeList = channel.unary_unary(
                '/AnimeList/GetRecomendedAnimeList',
                request_serializer=others_dot_AnimeList__pb2.recomended_animeList_Request.SerializeToString,
                response_deserializer=others_dot_AnimeList__pb2.recomended_animeList_Response.FromString,
                _registered_method=True)


class AnimeListServicer(object):
    """--------------------------> SERVICE FOR ANIMELIST
    """

    def GetAllAnimes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAnimeByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMultipleAnimeByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSimilarAnime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecomendedAnimeList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnimeListServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllAnimes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllAnimes,
                    request_deserializer=others_dot_AnimeList__pb2.get_all_animes.FromString,
                    response_serializer=others_dot_AnimeList__pb2.get_all_animes_Response.SerializeToString,
            ),
            'GetAnimeByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAnimeByName,
                    request_deserializer=others_dot_AnimeList__pb2.get_anime_by_name_Request.FromString,
                    response_serializer=others_dot_AnimeList__pb2.get_anime_by_name_Response.SerializeToString,
            ),
            'GetMultipleAnimeByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMultipleAnimeByName,
                    request_deserializer=others_dot_AnimeList__pb2.get_multiple_anime_by_name_Request.FromString,
                    response_serializer=others_dot_AnimeList__pb2.get_multiple_anime_by_name_Response.SerializeToString,
            ),
            'GetSimilarAnime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSimilarAnime,
                    request_deserializer=others_dot_AnimeList__pb2.get_similar_anime_Request.FromString,
                    response_serializer=others_dot_AnimeList__pb2.get_similar_anime_Response.SerializeToString,
            ),
            'GetRecomendedAnimeList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecomendedAnimeList,
                    request_deserializer=others_dot_AnimeList__pb2.recomended_animeList_Request.FromString,
                    response_serializer=others_dot_AnimeList__pb2.recomended_animeList_Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AnimeList', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('AnimeList', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AnimeList(object):
    """--------------------------> SERVICE FOR ANIMELIST
    """

    @staticmethod
    def GetAllAnimes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AnimeList/GetAllAnimes',
            others_dot_AnimeList__pb2.get_all_animes.SerializeToString,
            others_dot_AnimeList__pb2.get_all_animes_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAnimeByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AnimeList/GetAnimeByName',
            others_dot_AnimeList__pb2.get_anime_by_name_Request.SerializeToString,
            others_dot_AnimeList__pb2.get_anime_by_name_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMultipleAnimeByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AnimeList/GetMultipleAnimeByName',
            others_dot_AnimeList__pb2.get_multiple_anime_by_name_Request.SerializeToString,
            others_dot_AnimeList__pb2.get_multiple_anime_by_name_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSimilarAnime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AnimeList/GetSimilarAnime',
            others_dot_AnimeList__pb2.get_similar_anime_Request.SerializeToString,
            others_dot_AnimeList__pb2.get_similar_anime_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRecomendedAnimeList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AnimeList/GetRecomendedAnimeList',
            others_dot_AnimeList__pb2.recomended_animeList_Request.SerializeToString,
            others_dot_AnimeList__pb2.recomended_animeList_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
